
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'


import React, { useState, useEffect } from 'react';
import { AlertTriangle, Clock, Calendar } from 'lucide-react';

// Dados das obras com datas de início e término atualizadas

function App() {
  const obrasData = [
    {
      id: 102939,
      descricao: 'Revitalização Córrego Jerimu',
      regiao: "Sul",
      percentualConcluido: 52.06,
      valor_total: 2342000.46,
      nome_contratado: 'URBAN GREEN SERVICOS URBANISTICOS LTDA',
      previsao_inicio: '2023-09-16',
      previsao_termino: '2024-06-30'
    },
    {
      id: 102959,
      descricao: 'Reforma e Ampliação da Escola Municipal Carlos Kraemer',
      regiao: "Norte",
      percentualConcluido: 100.00,
      valor_total: 2485021.07,
      nome_contratado: 'CBENG ENGENHARIA E CONSTRUCAO CIVIL LTDA',
      previsao_inicio: '2023-01-10',
      previsao_termino: '2024-02-28'
    },
    {
      id: 102999,
      descricao: 'Revitalização do Canteiro Central da Avenida Curitiba',
      regiao: "Norte",
      percentualConcluido: 94.97,
      valor_total: 737000,
      nome_contratado: 'MMS PINOVA EQUIPAMENTOS E INSTALACOES ESPORTIVAS S.A',
      previsao_inicio: '2023-11-01',
      previsao_termino: '2024-05-15'
    }
  ];

  const SmartTVPainel = () => {
    const [indiceAtual, setIndiceAtual] = useState(0);
    const [diasRestantes, setDiasRestantes] = useState(0);

    // Calculate regional summary
    const resumoRegioes = obrasData.reduce<Record<string, number>>((acc, obra) => {
      acc[obra.regiao] = (acc[obra.regiao] || 0) + 1;
      return acc;
    }, {});

    //const resumoRegioes = obrasData.reduce((acc, obra) => {
    //  acc[obra.regiao] = (acc[obra.regiao] || 0) + 1;
    //  return acc;
    //}, {});

    const valorTotalInvestido = obrasData.reduce((total, obra) => total + obra.valor_total, 0);

    useEffect(() => {
      // Função para avançar os slides automaticamente
      const intervalId = setInterval(() => {
        setIndiceAtual((prevIndice) =>
          (prevIndice + 1) % obrasData.length
        );
      }, 5000); // Muda a cada 5 segundos
      return () => clearInterval(intervalId);
    }, []);

    // Calcular dias restantes quando o índice muda
    useEffect(() => {
      calcularDiasRestantes();
    }, [indiceAtual]);

    const obraAtual = obrasData[indiceAtual];

    // Função para calcular dias restantes
    const calcularDiasRestantes = () => {
      const hoje = new Date();
      const termino = new Date(obraAtual.previsao_termino as string); // Garante que é string
      if (isNaN(termino.getTime())) {
        console.error("Data inválida:", obraAtual.previsao_termino);
        return;
      }
      const diferencaDias = Math.ceil((termino.getTime() - hoje.getTime()) / (1000 * 60 * 60 * 24));
      setDiasRestantes(diferencaDias);
    };

    // Função para formatar data
    const formatarData = (data: string | Date): string => {
      return new Date(data).toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    };

    // Função para verificar se a obra está próxima do prazo final
    const verificarPrazoProximo = (dataTermino: string | Date): boolean => {
      const hoje = new Date();
      const termino = new Date(dataTermino);
      const diferencaDias = (termino.getTime() - hoje.getTime()) / (1000 * 60 * 60 * 24);
      return diferencaDias <= 30 && diferencaDias > 0;
    };

    // Função para verificar se a obra está com prazo vencido
    const verificarPrazoVencido = (dataTermino: string | Date): boolean => {
      const hoje = new Date();
      const termino = new Date(dataTermino);
      return hoje > termino;
    };


    // Verificar se a obra atual está próxima do prazo
    const prazoProximo = verificarPrazoProximo(obraAtual.previsao_termino);
    const prazoVencido = verificarPrazoVencido(obraAtual.previsao_termino);

    // Determinar a cor do aviso da contagem regressiva
    const obterCorContagem = () => {
      if (prazoVencido) return "bg-red-600"; // Vermelho para prazo vencido
      if (prazoProximo) return "bg-yellow-500"; // Amarelo para prazo próximo
      return "bg-green-500"; // Verde para prazo normal
    };

    // Determinar o texto da contagem regressiva
    const obterTextoContagem = () => {
      if (prazoVencido) return `Prazo vencido há ${Math.abs(diasRestantes)} dias`;
      return `${diasRestantes} dias restantes`;
    };

    return (
      <div className="w-full h-screen bg-gray-900 text-white flex flex-col justify-center items-center p-8 relative">
        {/* Caixas de resumo no canto superior direito */}
        <div className="absolute top-8 right-8 flex flex-col space-y-4">
          {/* Caixa de Obras por Região */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-xl w-72">
            <h3 className="text-2xl font-semibold mb-4 text-center">Obras por Região</h3>
            {Object.entries(resumoRegioes).map(([regiao, quantidade]) => (
              <div key={regiao} className="flex justify-between mb-2">
                <span className="text-xl text-gray-300">{regiao}:</span>
                <span className="text-xl font-bold text-blue-400">
                  {quantidade} obra{quantidade > 1 ? 's' : ''}
                </span>
              </div>
            ))}
          </div>

          {/* Caixa de Investimento Total */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-xl w-72">
            <h3 className="text-2xl font-semibold mb-4 text-center">Investimento Total</h3>
            <div className="text-center">
              <span className="text-3xl font-bold text-green-500">
                R$ {valorTotalInvestido.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
              </span>
            </div>
          </div>
        </div>

        <h1 className="text-5xl font-bold mb-12 text-center">
          Obras Públicas de Londrina
        </h1>
        <div className="w-full max-w-4xl bg-gray-800 rounded-2xl shadow-2xl p-8 relative">
          {/* Contagem Regressiva */}
          <div className="absolute -top-4 -right-4">
            <div className={`${obterCorContagem()} text-white rounded-full p-3 shadow-2xl flex items-center`}>
              <Calendar size={28} className="mr-2" />
              <span className="text-xl font-bold">{obterTextoContagem()}</span>
            </div>
          </div>

          <div className="flex items-center justify-between mb-8">
            <div className="w-3/4">
              <h2 className="text-3xl font-semibold mb-4">
                {obraAtual.descricao}
              </h2>
              <p className="text-2xl text-gray-400 mb-2">
                Região: {obraAtual.regiao}
              </p>
              <p className="text-2xl text-gray-400 mb-4">
                Empresa: {obraAtual.nome_contratado}
              </p>
              <div className="flex space-x-8 mt-4">
                <div>
                  <span className="text-xl text-gray-300">Início: </span>
                  <span className="text-2xl font-bold text-blue-400">
                    {formatarData(obraAtual.previsao_inicio)}
                  </span>
                </div>
                <div>
                  <span className="text-xl text-gray-300">Término: </span>
                  <span className="text-2xl font-bold text-blue-400">
                    {formatarData(obraAtual.previsao_termino)}
                  </span>
                </div>
              </div>
            </div>
            <div className="w-1/4 text-right">
              <div
                className="radial-progress text-blue-500"
                style={{
                  "--value": obraAtual.percentualConcluido,
                  "--size": "10rem",
                  "--thickness": "1.5rem"
                } as React.CSSProperties} // <-- Solução para permitir variáveis CSS personalizadas
                role="progressbar"
              >
                <span className="text-6xl font-bold">
                  {obraAtual.percentualConcluido.toFixed(2)}%
                </span>
              </div>

            </div>
          </div>
          <div className={`w-full ${prazoVencido ? 'bg-red-900' : 'bg-gray-700'} rounded-full h-4`}>
            <div
              className={`${prazoVencido ? 'bg-red-600' : 'bg-blue-500'} h-4 rounded-full`}
              style={{ width: `${obraAtual.percentualConcluido}%` }}
            ></div>
          </div>
          <div className="mt-8 flex justify-between items-center">
            <div className="text-2xl">
              <span className="font-bold">Valor Total:</span>
              R$ {obraAtual.valor_total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </div>
            <div className="flex space-x-2">
              {obrasData.map((_, index) => (
                <div
                  key={index}
                  className={`w-4 h-4 rounded-full ${index === indiceAtual ? 'bg-blue-500' : 'bg-gray-600'
                    }`}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };
}
export default App;